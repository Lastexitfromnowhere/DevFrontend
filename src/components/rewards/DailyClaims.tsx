import React, { useState, useEffect } from 'react';import { Card } from '../ui/Card';import { DashboardButton } from '../ui/DashboardButton';import { useWalletContext } from '@/contexts/WalletContext';import { Calendar, TrendingUp } from 'lucide-react';import { config } from '@/config/env';import axios from 'axios';import { Spinner } from '../ui/Spinner';import { authService } from '@/services/authService';import Image from 'next/image';const DAILY_CLAIMS_API_BASE = `${config.API_BASE_URL}/dailyClaims`;interface RewardsState {  availableRewards: number;  lastClaimDate: string | null;  canClaim: boolean;  nextClaimTime: string | null;  claimHistory: Array<{    amount: number;    timestamp: string;    status: string;  }>;}export default function DailyClaims() {  const { isConnected, account } = useWalletContext();  const [isLoading, setIsLoading] = useState(false);  const [isClaiming, setIsClaiming] = useState(false);  const [error, setError] = useState<string | null>(null);  const [rewards, setRewards] = useState<RewardsState>({    availableRewards: 0,    lastClaimDate: null,    canClaim: false,    nextClaimTime: null,    claimHistory: []  });  const fetchRewards = async () => {    if (!isConnected || !account) {      setError('Wallet not connected');      return;    }    const isGoogleWallet = typeof window !== 'undefined' ? localStorage.getItem('isGoogleWallet') === 'true' : false;    setIsLoading(true);    try {      console.log('Fetching rewards from:', DAILY_CLAIMS_API_BASE);      await authService.refreshTokenIfNeeded();      const tokenWalletAddress = authService.getWalletAddressFromToken();      let walletAddressToUse = account;      if (tokenWalletAddress && tokenWalletAddress !== account) {        console.warn(`L'adresse fournie (${account}) ne correspond pas à celle du token (${tokenWalletAddress}). Utilisation de l'adresse du token.`);        walletAddressToUse = tokenWalletAddress;      }      const tokenMatch = await authService.verifyTokenWalletMatch();      console.log('Le token correspond à l\'adresse du wallet:', tokenMatch);      const headers = await authService.getAuthHeaders();      console.log('Entêtes d\'authentification:', headers);      console.log('Adresse du wallet utilisée pour la requête:', walletAddressToUse);      const response = await axios.get(DAILY_CLAIMS_API_BASE, {        headers,        params: { walletAddress: walletAddressToUse }      });      console.log('API response:', response);      const responseData = response.data as any;      if (responseData.success) {        setRewards({          availableRewards: responseData.availableRewards || 0,          lastClaimDate: responseData.lastClaimDate,          canClaim: responseData.canClaim || false,          nextClaimTime: responseData.nextClaimTime,          claimHistory: responseData.claimHistory || []        });      } else {        setError(responseData.message || 'Failed to fetch rewards');      }    } catch (error: any) {      console.error('Error fetching rewards:', error);      setError(error.message || 'Failed to fetch rewards');    } finally {      setIsLoading(false);    }  };  const claimDailyRewards = async () => {    if (!isConnected || !account) {      setError('Wallet not connected');      return;    }    setIsClaiming(true);    try {      await authService.refreshTokenIfNeeded();      const tokenWalletAddress = authService.getWalletAddressFromToken();      let walletAddressToUse = account;      if (tokenWalletAddress && tokenWalletAddress !== account) {        console.warn(`L'adresse fournie (${account}) ne correspond pas à celle du token (${tokenWalletAddress}). Utilisation de l'adresse du token.`);        walletAddressToUse = tokenWalletAddress;      }      const headers = await authService.getAuthHeaders();      console.log('Entêtes d\'authentification pour claim:', headers);      console.log('Adresse du wallet utilisée pour la requête de claim:', walletAddressToUse);      const response = await axios.post(`${DAILY_CLAIMS_API_BASE}/claim`, null, {        headers,        params: { walletAddress: walletAddressToUse }      });      console.log('Claim response:', response);      const responseData = response.data as any;      if (responseData.success) {        await fetchRewards();      } else {        setError(responseData.message || 'Failed to claim rewards');      }    } catch (error: any) {      console.error('Error claiming rewards:', error);      setError(error.message || 'Failed to claim rewards');    } finally {      setIsClaiming(false);    }  };  const getTimeRemaining = (): string => {    if (!rewards.nextClaimTime) return 'N/A';    const now = new Date();    const nextClaim = new Date(rewards.nextClaimTime);    const diffMs = nextClaim.getTime() - now.getTime();    if (diffMs <= 0) return 'Available now';    const diffHrs = Math.floor(diffMs / (1000 * 60 * 60));    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));    return `${diffHrs}h ${diffMins}m`;  };  const calculateTotalBalance = (): number => {    if (!rewards.claimHistory || rewards.claimHistory.length === 0) {      return rewards.availableRewards;    }    const totalClaimed = rewards.claimHistory      .filter(claim => claim.status === 'success')      .reduce((sum, claim) => sum + claim.amount, 0);    return totalClaimed + rewards.availableRewards;  };  const totalBalance = calculateTotalBalance();  useEffect(() => {    if (isConnected && account) {      fetchRewards();      const interval = setInterval(() => {        fetchRewards();      }, 60000);       return () => clearInterval(interval);    }  }, [isConnected, account]);  const isGoogleWallet = typeof window !== 'undefined' ? localStorage.getItem('isGoogleWallet') === 'true' : false;  if (!isConnected) {    return (      <Card className="backdrop-blur-md bg-black/40 border border-gray-700/50 p-6 rounded-lg shadow-lg text-center">        <p className="text-gray-400">Veuillez vous connecter pour voir vos récompenses</p>      </Card>    );  }  return (    <Card className="relative overflow-hidden backdrop-blur-md bg-black/70 border border-gray-700/50 p-6 rounded-3xl shadow-lg transition-all duration-500 space-y-6 max-w-md mx-auto">      {}      <div className="text-center">        <h3 className="text-3xl font-bold text-[#3DAEFF] tracking-wider">DAILY REWARD</h3>      </div>      {}      {error && (        <div className="flex items-center bg-red-500/20 text-red-400 border border-red-500/30 p-3 rounded-md backdrop-blur-sm">          <span>{error}</span>        </div>      )}      {}      <div className="flex">        {}        <div className="flex-shrink-0 relative w-1/2">          <Image             src="/image.png"             alt="Fox character"             width={200}             height={300}            className="object-contain"          />        </div>        {}        <div className="flex-grow flex flex-col justify-center space-y-6">          {}          <div>            <p className="text-gray-400 text-lg mb-1">Connected wallet</p>            <div className="bg-black/30 border border-gray-700/50 rounded-xl px-4 py-2">              <p className="text-white font-medium truncate">                {isLoading ? <Spinner size="sm" /> : account ? `${account.substring(0, 4)}...${account.substring(account.length - 4)}` : 'Not connected'}              </p>            </div>          </div>          {}          <div>            <p className="text-gray-400 text-lg mb-1">Available</p>            <div className="text-[#00FF88] text-5xl font-bold">              {isLoading ? <Spinner size="lg" /> : totalBalance.toFixed(3)} <span className="text-2xl">RWRD</span>            </div>            {rewards.availableRewards > 0 && rewards.availableRewards !== totalBalance && (              <div className="text-sm text-gray-300 mt-1">                <span className="text-blue-400">{rewards.availableRewards.toFixed(3)}</span> ready to claim              </div>            )}          </div>          {}          <div>            <button              onClick={claimDailyRewards}              disabled={!rewards.canClaim || isClaiming}              className="w-full bg-[#0066CC] hover:bg-[#0055AA] text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed text-xl"            >              {isClaiming ? <Spinner size="sm" /> : 'Claim'}            </button>          </div>        </div>      </div>      {}      <div className="flex justify-between items-center pt-4 border-t border-gray-700/30 text-gray-400">        <div className="flex items-center">          <Calendar className="w-4 h-4 mr-2" />          <span>{new Date().toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}</span>        </div>        <div className="flex items-center">          <TrendingUp className="w-4 h-4 mr-2" />          <span>1.000 / day</span>        </div>      </div>    </Card>  );}