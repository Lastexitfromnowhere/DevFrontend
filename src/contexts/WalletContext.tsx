'use client';import React, { createContext, useContext, useMemo, ReactNode, useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import { authService } from '../services/authService';import {   ConnectionProvider,   WalletProvider,   useWallet } from '@solana/wallet-adapter-react';import {   PhantomWalletAdapter,   SolflareWalletAdapter } from '@solana/wallet-adapter-wallets';import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';import { clusterApiUrl } from '@solana/web3.js';const getNetwork = (): WalletAdapterNetwork => {  return typeof process !== 'undefined' && process.env.NODE_ENV === 'development'     ? WalletAdapterNetwork.Devnet     : WalletAdapterNetwork.Mainnet;};interface WalletContextType {  isConnected: boolean;  isAuthReady: boolean;  account: string | null;  publicKey: string | null;  chain: string;  isGoogleWallet: boolean;  connectWallet: () => void;  disconnectWallet: () => void;}const WalletContext = createContext<WalletContextType>({  isConnected: false,  isAuthReady: false,  account: null,  publicKey: null,  chain: 'Solana',  isGoogleWallet: false,  connectWallet: () => {},  disconnectWallet: () => {}});export const WalletContextProvider = ({ children }: { children: ReactNode }) => {  return (    <WalletContextWrapper>      {children}    </WalletContextWrapper>  );};const WalletContextWrapper = ({ children }: { children: ReactNode }) => {  const {     publicKey,     connected,     disconnect,    select,    connect,    wallets  } = useWallet();  const [isAuthReady, setIsAuthReady] = useState(false);  const router = useRouter();  const connectWallet = async () => {    console.log('Tentative de connexion wallet...');    try {      if (select && wallets.length > 0) {        console.log('Sélection du premier wallet disponible...');        const firstWallet = wallets[0];        select(firstWallet.adapter.name);        await new Promise(resolve => setTimeout(resolve, 500));        if (connect) {          console.log('Connexion au wallet sélectionné...');          await connect();          return;        }      }      console.log('Fallback: tentative de connexion directe...');      if (window.solana?.isPhantom) {        console.log('Phantom détecté, connexion directe...');        const response = await window.solana.connect();        console.log('Phantom connecté:', response.publicKey.toString());        return;      }      if ((window as any).solflare?.isSolflare) {        console.log('Solflare détecté, connexion directe...');        const response = await (window as any).solflare.connect();        console.log('Solflare connecté:', response.publicKey.toString());        return;      }      console.log('Aucun wallet détecté');      throw new Error('Aucun wallet compatible trouvé');    } catch (error) {      console.error('Erreur lors de la connexion wallet:', error);      throw error;    }  };  const disconnectWallet = () => {    const isGoogleWallet = typeof window !== 'undefined' ? localStorage.getItem('isGoogleWallet') === 'true' : false;    if (isGoogleWallet) {      console.log('Déconnexion d\'un utilisateur Google');      if (typeof window !== 'undefined') {        localStorage.removeItem('isGoogleWallet');        localStorage.removeItem('google_user_id');        authService.logout();        setIsAuthReady(false);        const disconnectEvent = new Event('wallet-disconnect');        window.dispatchEvent(disconnectEvent);        if (router) {          router.push('/login');        } else {          window.location.href = '/login';        }      }    } else if (disconnect) {      disconnect();      authService.logout();      setIsAuthReady(false);      if (typeof window !== 'undefined') {        const disconnectEvent = new Event('wallet-disconnect');        window.dispatchEvent(disconnectEvent);        if (router) {          router.push('/login');        } else {          window.location.href = '/login';        }      }    }  };  useEffect(() => {    const handleAuthentication = async () => {      if (!connected || !publicKey) {        setIsAuthReady(false);        return;      }      const walletAddress = publicKey.toBase58();      try {        const storedAddress = authService.getWalletAddress();        if (storedAddress !== walletAddress || authService.isTokenExpired()) {          const { token, expiresAt } = await authService.generateToken(walletAddress);          if (token && expiresAt) {            authService.saveToken(token, expiresAt, walletAddress);            setIsAuthReady(true);            console.log('Authentification réussie avec un nouveau token');            console.log('Token généré, état mis à jour');          } else {            console.warn('Impossible de générer un token, mais on continue quand même');            setIsAuthReady(true);           }        } else {          console.log('Token existant valide trouvé');          setIsAuthReady(true);          if (typeof window !== 'undefined' && window.location.pathname.includes('/login')) {            setTimeout(() => {              window.location.href = '/';            }, 500);          }        }      } catch (error) {        console.error('Erreur lors de l\'authentification:', error);        setIsAuthReady(true);      }    };    handleAuthentication();  }, [connected, publicKey]);  const isGoogleWallet = typeof window !== 'undefined' ? localStorage.getItem('isGoogleWallet') === 'true' : false;  const getGoogleWalletPublicKey = () => {    if (isGoogleWallet && typeof window !== 'undefined') {      const possibleKeys = ['wallet_address', 'WALLET_ADDRESS_KEY', 'walletAddress'];      for (const key of possibleKeys) {        const address = localStorage.getItem(key);        if (address) {          console.log(`Adresse de portefeuille Google trouvée avec la clé ${key}:`, address);          return address;        }      }      console.log('Aucune adresse de portefeuille Google trouvée, utilisation d\'une valeur par défaut');      return 'google-wallet';    }    return null;  };  useEffect(() => {    if (isGoogleWallet && !isAuthReady) {      console.log('Utilisateur Google détecté, définition de isAuthReady à true');      setIsAuthReady(true);    }  }, [isGoogleWallet, isAuthReady]);  const contextValue = {    isConnected: connected || isGoogleWallet,    isAuthReady: isAuthReady || isGoogleWallet,     account: publicKey ? publicKey.toBase58() : (isGoogleWallet ? getGoogleWalletPublicKey() : null),    publicKey: publicKey ? publicKey.toBase58() : (isGoogleWallet ? getGoogleWalletPublicKey() : null),    chain: 'Solana',    isGoogleWallet,    connectWallet,    disconnectWallet  };  return (    <WalletContext.Provider value={contextValue}>      {children}    </WalletContext.Provider>  );};export const useWalletContext = () => {  const context = useContext(WalletContext);  if (!context) {    throw new Error('useWalletContext must be used within WalletProvider');  }  return context;};