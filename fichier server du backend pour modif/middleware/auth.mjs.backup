// middleware/auth.mjs
// Middleware d'authentification simplifié pour le développement

export const authenticateToken = (req, res, next) => {
  try {
    // Récupérer le token d'authentification
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    // En mode développement, on accepte les requêtes même sans token
    if (!token) {
      console.log('⚠️ Aucun token fourni, mais on continue en mode développement');
      req.walletAddress = '0x1234567890abcdef1234567890abcdef12345678'; // Adresse de wallet fictive
      return next();
    }
    
    // Si le token est 'null' (en tant que chaîne), on continue quand même
    if (token === 'null') {
      console.log('⚠️ Token "null" fourni, mais on continue en mode développement');
      req.walletAddress = '0x1234567890abcdef1234567890abcdef12345678'; // Adresse de wallet fictive
      return next();
    }
    
    // Normalement, on vérifierait le token JWT ici
    // jwt.verify(token, process.env.JWT_SECRET, (err, user) => { ... });
    
    // Pour le développement, on accepte tous les tokens
    req.walletAddress = '0x1234567890abcdef1234567890abcdef12345678'; // Adresse de wallet fictive
    next();
  } catch (error) {
    console.error('❌ Erreur d\'authentification:', error);
    return res.status(401).json({ success: false, message: 'Token invalide' });
  }
};
